DWAPlannerROS:

# Robot Configuration Parameters
  max_vel_x: 0.8
  min_vel_x: -0.8

  max_vel_y: 0.8
  min_vel_y: -0.8

  max_trans_vel: 0.8 # choose slightly less than the base's capability
  min_trans_vel: 0.1  # this is the min trans velocity when there is negligible translational velocity
  trans_stopped_vel: 0.01

  # Warning!
  #   do not set min_trans_vel to 0.0 otherwise dwa will always think translational velocities
  #   are non-negligible and small in place rotational velocities will be created.

  max_rot_vel: 0.9  # choose slightly less than the base's capability
  min_rot_vel: 0.05  # this is the min angular velocity when there is negligible rotational velocity
  rot_stopped_vel: 0.01
  
  acc_lim_x: 0.4 # maximum is theoretically 1.5 (given a maximum tilt angle of 15 degrees)
  acc_lim_theta: 1.0
  acc_lim_y: 0.4      # diff drive robot

# Goal Tolerance Parameters
  yaw_goal_tolerance: 0.3  # 0.05
  xy_goal_tolerance: 0.8  # 0.10
  # latch_xy_goal_tolerance: false

# Forward Simulation Parameters
  sim_time: 2       # 1.7
  vx_samples: 6       # 3
  vy_samples: 6       # diff drive robot, there is only one sample
  vtheta_samples: 15  # 20

# Trajectory Scoring Parameters
  path_distance_bias: 25.0      # 32.0   - weighting for how much it should stick to the global path plan
  goal_distance_bias: 24.0      # 24.0   - wighting for how much it should attempt to reach its goal
  occdist_scale: 0.5            # 0.01   - weighting for how much the controller should avoid obstacles
  forward_point_distance: 0.325 # 0.325  - how far along to place an additional scoring point
  stop_time_buffer: 0.2         # 0.2    - amount of time a robot must stop in before colliding for a valid traj.
  scaling_speed: 0.25           # 0.25   - absolute velocity at which to start scaling the robot's footprint
  max_scaling_factor: 0.2       # 0.2    - how much to scale the robot's footprint when at speed.

# Oscillation Prevention Parameters
  oscillation_reset_dist: 0.05  # 0.05   - how far to travel before resetting oscillation flags

# Debugging
  publish_traj_pc : true
  publish_cost_grid_pc: true
  global_frame_id: odom


# Ball-bot is a holonomic robot (it can drive in any direction)
  holonomic_robot: true    # OBS! dwa_local_planner is by default a holonomic planner - so if DWA planner is used for a differential drive robot (non-holonomic driving), this flag has to be set to false
